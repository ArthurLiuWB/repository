# git 命令
# 1. git仓库初始化，新建一个目录，然后使用git init命令
git init
# 2. 添加文件到仓库，两步
git add <file>
git commit -m <message>
# 3. 掌握工作区状态
git status
git diff <file>
# 4. 版本回退，HEAD是当前的版本
git reset --hard <commit_id>
git log 查看提交历史，确定回退的版本
git reflog 查看命令历史，可以回到未来的哪个版本
# 5. 工作区、版本库.git；版本库里存放了暂存区stage，为我们自动创建的一个分支master，以及指向master的一个指针叫HEAD
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
# 6. 工作区文件回滚到分支版本或者暂存区版本
git checkout -- <file>
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
# 7. 远程仓库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
# 8. 克隆仓库
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
# 9. 分支
git checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch dev git checkout dev
git branch  git branch命令会列出所有分支，当前分支前面会标一个*号。
git merge dev 合并分支：git merge命令用于合并指定分支到当前分支。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
git branch -d dev 删除分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
# 10. 解决冲突
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
git log --graph --pretty=oneline --abbrev-commit
# 11. 不使用Fast-forward
git merge --no-ff -m "merge with no-ff" dev 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
# 12. bug分支
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
# 13. feature分支
git checkout -b feature-vulcan
# 14. 多人协作
git remote -v 查看远程仓库
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
 git push origin master
 并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。